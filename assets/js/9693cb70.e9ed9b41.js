"use strict";(self.webpackChunkaxon_docs=self.webpackChunkaxon_docs||[]).push([[8314],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=d(n),h=r,m=f["".concat(l,".").concat(h)]||f[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={title:"Hardfork",hide_title:!0,sidebar_position:7},i="Hardfork",s={unversionedId:"devops/hardfork",id:"devops/hardfork",title:"Hardfork",description:"Axon empowers developers to initiate hardforks. The currently available hardfork, Andromeda, takes its name from one of the 88 constellations. The upcoming hardforks on Axon will follow this order of the constellations.",source:"@site/docs/devops/hardfork.md",sourceDirName:"devops",slug:"/devops/hardfork",permalink:"/devops/hardfork",draft:!1,editUrl:"https://github.com/axonweb3/axon-docs/edit/main/docs/devops/hardfork.md",tags:[],version:"current",lastUpdatedAt:1699946708,formattedLastUpdatedAt:"Nov 14, 2023",sidebarPosition:7,frontMatter:{title:"Hardfork",hide_title:!0,sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Proxy",permalink:"/devops/proxy"},next:{title:"Differences Between Axon and Ethereum",permalink:"/differences"}},l={},d=[{value:"Usage Instructions",id:"usage-instructions",level:2},{value:"1. Build Axon from source code",id:"1-build-axon-from-source-code",level:3},{value:"2. Start multiple Axon nodes",id:"2-start-multiple-axon-nodes",level:3},{value:"3. Enable hardfork",id:"3-enable-hardfork",level:3},{value:"4. Wait and verify",id:"4-wait-and-verify",level:3},{value:"5. Deploy a contract larger than the default <code>max_contract_limit</code>",id:"5-deploy-a-contract-larger-than-the-default-max_contract_limit",level:3},{value:"6. Increase <code>max_contract_limit</code>",id:"6-increase-max_contract_limit",level:3},{value:"7. Test the new <code>max_contract_limit</code>",id:"7-test-the-new-max_contract_limit",level:3}],c={toc:d},f="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hardfork"},"Hardfork"),(0,r.kt)("p",null,"Axon empowers developers to initiate hardforks. The currently available hardfork, Andromeda, takes its name from one of the 88 constellations. The upcoming hardforks on Axon will follow ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IAU_designated_constellations#List"},"this order of the constellations"),". "),(0,r.kt)("p",null,"When Andromeda is enabled, validators are allowed to modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_contract_limit")," through ",(0,r.kt)("a",{parentName:"p",href:"https://docs.axonweb3.io/contract/system_contacts/#metadata"},"the system contract ",(0,r.kt)("inlineCode",{parentName:"a"},"0xffffffffffffffffffffffffffffffffffffff01")),". If the hardfork is not activated, only the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_contract_limit")," is immutable, while other configs remain adjustable. Axon provides a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon/blob/f9974e62924693494476560316db9f70bc650b80/.github/workflows/hardfork_test.yml"},"hardfork test CI")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon-hardfork-test"},"a test project")," for your reference."),(0,r.kt)("h2",{id:"usage-instructions"},"Usage Instructions"),(0,r.kt)("h3",{id:"1-build-axon-from-source-code"},"1. Build Axon from source code"),(0,r.kt)("p",null,"Start to build Axon from the source code using the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd $your_workspace\ngit clone https://github.com/axonweb3/axon.git\ncd axon\ncargo build\n")),(0,r.kt)("h3",{id:"2-start-multiple-axon-nodes"},"2. Start multiple Axon nodes"),(0,r.kt)("p",null,"To run multiple Axon nodes, use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon-hardfork-test/blob/5c9c172cc1ed1dff544f7e092f7052c314030c1d/reset.sh"},(0,r.kt)("inlineCode",{parentName:"a"},"reset.sh"))," script to clear data and start axon nodes. You can also use it for the first-time startup."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/axonweb3/axon-hardfork-test.git\ncd axon-hardfork-test\nbash reset.sh $your_workspace/axon\n")),(0,r.kt)("p",null,"The default configuration to enable hardfork is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon/blob/f9974e62924693494476560316db9f70bc650b80/devtools/chain/specs/multi_nodes/chain-spec.toml#L10"},(0,r.kt)("inlineCode",{parentName:"a"},"hardforks = []")),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"reset.sh")," script changes ",(0,r.kt)("inlineCode",{parentName:"p"},"hardforks = []")," to ",(0,r.kt)("inlineCode",{parentName:"p"},'hardforks = ["None"]')," to disable hardfork. Later, you can enable hardfork using ",(0,r.kt)("inlineCode",{parentName:"p"},"hardfork -c")," followed by specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"hardfork-start-number"),".\nYou can expect the output to resemble the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'No process found listening on port 8001\nNo process found listening on port 8002\nNo process found listening on port 8003\nNo process found listening on port 8004\nhardforks = ["None"]\nnode_1 height: 6 // `height: 6` indicates that the nodes are producing blocks without any issues. \nnode_2 height: 6\nnode_3 height: 6\nnode_4 height: 6\n{\n  "jsonrpc": "2.0",\n  "result": {}, // When querying with `axon_getHardforkInfo` and receiving a response of `"result": {}`, it implies that the hardfork is currently disabled.\n  "id": 1\n}\n{\n  "jsonrpc": "2.0",\n  "result": {},\n  "id": 2\n}\n{\n  "jsonrpc": "2.0",\n  "result": {},\n  "id": 3\n}\n{\n  "jsonrpc": "2.0",\n  "result": {},\n  "id": 4\n}\n')),(0,r.kt)("h3",{id:"3-enable-hardfork"},"3. Enable hardfork"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon-hardfork-test/blob/5c9c172cc1ed1dff544f7e092f7052c314030c1d/hardfork.sh"},(0,r.kt)("inlineCode",{parentName:"a"},"hardfork.sh"))," script to activate the hardfork, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon-hardfork-test/blob/5c9c172cc1ed1dff544f7e092f7052c314030c1d/hardfork.sh#L18"},"after 30 blocks by default"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"hardfork.sh")," first halts all nodes, then executes ",(0,r.kt)("inlineCode",{parentName:"p"},"hardfork -c")," to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"hardfork-start-number")," to restart the nodes. After restarting, you can check the status of ",(0,r.kt)("inlineCode",{parentName:"p"},"Andromeda")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"axon_getHardforkInfo"),", where the expected status value is ",(0,r.kt)("inlineCode",{parentName:"p"},"determined"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bash hardfork.sh $your_workspace/axon   \n")),(0,r.kt)("p",null,"You should see an output similar to this following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'axon_path: /Users/sunchengzhu/tmp/axon\nhardfork-start-number: 694\nKilling processes on port 8001: 9285\nKilling processes on port 8002: 9286\nKilling processes on port 8003: 9287\nKilling processes on port 8004: 9288\nnode_1 height: 670\nnode_2 height: 670\nnode_3 height: 670\nnode_4 height: 670\n{\n  "jsonrpc": "2.0",\n  "result": {\n    "Andromeda": "determined"\n  },\n  "id": 1\n}\n{\n  "jsonrpc": "2.0",\n  "result": {\n    "Andromeda": "determined"\n  },\n  "id": 2\n}\n{\n  "jsonrpc": "2.0",\n  "result": {\n    "Andromeda": "determined"\n  },\n  "id": 3\n}\n{\n  "jsonrpc": "2.0",\n  "result": {\n    "Andromeda": "determined"\n  },\n  "id": 4\n}\n')),(0,r.kt)("h3",{id:"4-wait-and-verify"},"4. Wait and verify"),(0,r.kt)("p",null,"You can verify if ",(0,r.kt)("inlineCode",{parentName:"p"},"Andromeda"),"'s status becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"enabled")," when the nodes reach the specified height, using the following test case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npm install\nnpx hardhat test --grep "check hardfork info after hardfork"\n')),(0,r.kt)("h3",{id:"5-deploy-a-contract-larger-than-the-default-max_contract_limit"},"5. Deploy a contract larger than the default ",(0,r.kt)("inlineCode",{parentName:"h3"},"max_contract_limit")),(0,r.kt)("p",null,"Execute the following test to confirm that the deployment transaction ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axonweb3/axon-hardfork-test/blob/5c9c172cc1ed1dff544f7e092f7052c314030c1d/test/checkMetadata.ts#L18-L25"},"returns an error message containing ",(0,r.kt)("inlineCode",{parentName:"a"},"CreateContractLimit")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx hardhat test --grep "deploy a big contract larger than max_contract_limit"\n')),(0,r.kt)("h3",{id:"6-increase-max_contract_limit"},"6. Increase ",(0,r.kt)("inlineCode",{parentName:"h3"},"max_contract_limit")),(0,r.kt)("p",null,"Use the system contract ",(0,r.kt)("inlineCode",{parentName:"p"},"0xffffffffffffffffffffffffffffffffffffff01")," to increases the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_contract_limit")," with the following test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx hardhat test --grep "update max_contract_limit"\n')),(0,r.kt)("h3",{id:"7-test-the-new-max_contract_limit"},"7. Test the new ",(0,r.kt)("inlineCode",{parentName:"h3"},"max_contract_limit")),(0,r.kt)("p",null,"Deploy the previous contract again, and anticipate a successful deployment with the updated ",(0,r.kt)("inlineCode",{parentName:"p"},"max_contract_limit"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'npx hardhat test --grep "deploy a big contract smaller than max_contract_limit"\n')))}p.isMDXComponent=!0}}]);