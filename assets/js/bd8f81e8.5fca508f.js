"use strict";(self.webpackChunkaxon_docs=self.webpackChunkaxon_docs||[]).push([[131],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>f});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=o.createContext({}),s=function(t){var e=o.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=s(t.components);return o.createElement(l.Provider,{value:e},t.children)},p="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},u=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,l=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),p=s(n),u=a,f=p["".concat(l,".").concat(u)]||p[u]||h[u]||r;return n?o.createElement(f,i(i({ref:e},d),{},{components:n})):o.createElement(f,i({ref:e},d))}));function f(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c[p]="string"==typeof t?t:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4114:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var o=n(7462),a=(n(7294),n(3905));n(4996);const r={title:"Deploy and Interact with a Solidity Contract",hide_title:!0,sidebar_position:3},i="Deploy and Interact with a Solidity Contract",c={unversionedId:"getting-started/for-dapp-devs/deploy_solidity",id:"getting-started/for-dapp-devs/deploy_solidity",title:"Deploy and Interact with a Solidity Contract",description:"Deploy a Solidity contract",source:"@site/docs/getting-started/for-dapp-devs/deploy_solidity.md",sourceDirName:"getting-started/for-dapp-devs",slug:"/getting-started/for-dapp-devs/deploy_solidity",permalink:"/getting-started/for-dapp-devs/deploy_solidity",draft:!1,editUrl:"https://github.com/axonweb3/axon-docs/edit/main/docs/getting-started/for-dapp-devs/deploy_solidity.md",tags:[],version:"current",lastUpdatedAt:1693389084,formattedLastUpdatedAt:"Aug 30, 2023",sidebarPosition:3,frontMatter:{title:"Deploy and Interact with a Solidity Contract",hide_title:!0,sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Send Transactions On Axon Via MetaMask",permalink:"/getting-started/for-dapp-devs/send_transactions_on_axon_via_metaMask"},next:{title:"Troubleshooting",permalink:"/getting-started/for-dapp-devs/troubleshooting"}},l={},s=[{value:"Deploy a Solidity contract",id:"deploy-a-solidity-contract",level:2},{value:"Interact With the Deployed Contract",id:"interact-with-the-deployed-contract",level:2}],d={toc:s},p="wrapper";function h(t){let{components:e,...n}=t;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-and-interact-with-a-solidity-contract"},"Deploy and Interact with a Solidity Contract"),(0,a.kt)("h2",{id:"deploy-a-solidity-contract"},"Deploy a Solidity contract"),(0,a.kt)("p",null,"Given Axon\u2019s full compatibility with the EVM, contract deployment on Axon closely resembles the process on Ethereum. You can follow the ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-runner/docs/getting-started#quick-start"},"Quick Start")," for guidance. The only distinction is the network, Axon. To make the adjustment, you need to edit the ",(0,a.kt)("a",{parentName:"p",href:"https://hardhat.org/hardhat-runner/docs/config"},"hardhat.config.ts")," file as follows, which is done on the internal Axon\u2019s testnet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { HardhatUserConfig } from "hardhat/config";\nimport "@nomicfoundation/hardhat-toolbox";\n\n// Axon genesis account configrued on the local / test network.\nconst AXON_PRIVATE_KEY = "0x37aa0f893d05914a4def0460c0a984d3611546cfb26924d7a7ca6e0db9950a2d";\n\nconst config: HardhatUserConfig = {\n  solidity: "0.8.19",\n  networks: {\n    axon: {\n      chainId: 2022,\n      url: "The axon net URL"\n      accounts: [AXON_PRIVATE_KEY],\n    },\n  },\n};\n\nexport default config;\n')),(0,a.kt)("p",null,"Then deploy the contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ npx hardhat run scripts/deploy.ts --network axon\n\nLock with 0.001ETH and unlock timestamp 1692058859 deployed to 0x7CcECF6cc5E022F7D582deF5d5b53fD179f9A368\n")),(0,a.kt)("p",null,"You can follow ",(0,a.kt)("a",{parentName:"p",href:"https://docs.axonweb3.io/getting-started/for-dapp-devs/send_transactions_on_axon_via_metaMask/#11-local-setup"},"this")," instruction to set up an Axon node locally, and replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," file with ",(0,a.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:8000"),"."),(0,a.kt)("h2",{id:"interact-with-the-deployed-contract"},"Interact With the Deployed Contract"),(0,a.kt)("p",null,"Interacting with Axon contracts is the same as with Ethereum contracts. You can refer to ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ethers.org/v4/api-contract.html#connecting-to-existing-contracts"},"Connecting to Existing Contracts")," for more details."),(0,a.kt)("p",null,"Below is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { ethers } from "ethers";\n\n// Copy from \'solidity-contract/artifacts/contracts/Lock.sol/Lock.json\'\nimport lockContract from "./Lock.json";\n\n// Address of the deployed contract\nconst contractAddress = "0x7CcECF6cc5E022F7D582deF5d5b53fD179f9A368";\n\nasync function main() {\n  // Connect to the network\n  let provider = new ethers.JsonRpcProvider(AXON_NET_URL);\n\n  // A Signer from a private key\n  const signer = new ethers.Wallet(AXON_PRIVATE_KEY, provider);\n\n  // Create a new instance of the Contract with a Signer, which allows\n  // update methods\n  const contract = new ethers.Contract(\n    contractAddress,\n    lockContract.abi,\n    signer,\n  );\n\n  console.log(\n    "before calling the contract: ",\n    await provider.getBalance(contract.target),\n  );\n\n  // Call a Contract\'s non-constant method\n  let tx = await contract.withdraw();\n  console.log("tx hash: ", tx.hash);\n\n  // The operation is NOT complete yet; we must wait until it is mined\n  await tx.wait();\n\n  console.log(\n    "after calling the contract: ",\n    await provider.getBalance(contract.target),\n  );\n\n  // Call Contract\'s read-only constant methods\n  console.log("unlock time: ", await contract.unlockTime());\n  console.log("contract owner: ", await contract.owner());\n}\n\nmain();\n')))}h.isMDXComponent=!0}}]);