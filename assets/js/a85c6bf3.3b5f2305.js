"use strict";(self.webpackChunkaxon_docs=self.webpackChunkaxon_docs||[]).push([[540],{3905:(e,t,o)=>{o.d(t,{Zo:()=>i,kt:()=>h});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},i=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),d=p(o),m=n,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return o?r.createElement(h,l(l({ref:t},i),{},{components:o})):r.createElement(h,l({ref:t},i))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:n,l[1]=c;for(var p=2;p<a;p++)l[p]=o[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9999:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var r=o(7462),n=(o(7294),o(3905)),a=o(4996);const l={title:"Explorer",hide_title:!0,sidebar_position:4},c="Explorer",s={unversionedId:"devops/explorer",id:"devops/explorer",title:"Explorer",description:"Axon uses BlockScan, an explorer tailored for Ethereum-compatible chains. By deploying BlockScan, you can access data from Axon-based chains and monitor their status.",source:"@site/docs/devops/explorer.md",sourceDirName:"devops",slug:"/devops/explorer",permalink:"/devops/explorer",draft:!1,editUrl:"https://github.com/axonweb3/axon-docs/edit/main/docs/devops/explorer.md",tags:[],version:"current",lastUpdatedAt:1698049149,formattedLastUpdatedAt:"Oct 23, 2023",sidebarPosition:4,frontMatter:{title:"Explorer",hide_title:!0,sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Procedural Macros in Instrumentation",permalink:"/devops/proc-macros"},next:{title:"Faucet",permalink:"/devops/faucet"}},p={},i=[{value:"Deployment",id:"deployment",level:2},{value:"Docker Compose",id:"docker-compose",level:3}],d={toc:i},u="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"explorer"},"Explorer"),(0,n.kt)("p",null,"Axon uses ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Magickbase/blockscan"},"BlockScan"),", an explorer tailored for Ethereum-compatible chains. By deploying BlockScan, you can access data from Axon-based chains and monitor their status."),(0,n.kt)("h2",{id:"deployment"},"Deployment"),(0,n.kt)("p",null,"Docker Compose is the current deployment method."),(0,n.kt)("h3",{id:"docker-compose"},"Docker Compose"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Clone BlockScan repository to your target machine:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"git clone --depth=1 https://github.com/Magickbase/blockscan.git\ncd blockscan\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Edit the config file located at ",(0,n.kt)("inlineCode",{parentName:"li"},"blockscan/dev.env"),". Make the following adjustments:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The purpose of the dev.env file is to enable explorer to connect to your locally existing components, but if the axon node and explorer are in the same machine, you can also deploy directly using our docker-compose without any problems")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"ETHEREUM_JSONRPC_VARIANT=geth\n# Http address of axon rpc,The default port is port 8000 of the host \n# Please change to your own axon rpc address port\nETHEREUM_JSONRPC_HTTP_URL=http://host.docker.internal:8000\n# Http address of Axon RPC, defaults to port 8000 of the host\n# Please change to your own axon rpc address port\nETHEREUM_JSONRPC_TRACE_URL=http://host.docker.internal:8000\n# The default is the postgresql address deployed in docker-compose\n# If you have your own postgresql, change it\nDATABASE_URL=postgresql://postgres:postgres123@db:5432/blockscan?ssl=false\n")),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Execute one-click deployment:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"cd ./bolockscan\nsudo docekr-compose up -d\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Access the explorer at:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"# Replace this address with the actual URL where your BlockScan explorer is deployed\nhttp://127.0.0.1:4020\n")),(0,n.kt)("img",{alt:"Untitled",src:(0,a.Z)("Axon Explorer interface.png"),width:"80%"}))}m.isMDXComponent=!0}}]);